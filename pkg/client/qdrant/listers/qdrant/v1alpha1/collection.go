/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/lburgazzoli/qdrant-operator/api/qdrant/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CollectionLister helps list Collections.
// All objects returned here must be treated as read-only.
type CollectionLister interface {
	// List lists all Collections in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Collection, err error)
	// Collections returns an object that can list and get Collections.
	Collections(namespace string) CollectionNamespaceLister
	CollectionListerExpansion
}

// collectionLister implements the CollectionLister interface.
type collectionLister struct {
	indexer cache.Indexer
}

// NewCollectionLister returns a new CollectionLister.
func NewCollectionLister(indexer cache.Indexer) CollectionLister {
	return &collectionLister{indexer: indexer}
}

// List lists all Collections in the indexer.
func (s *collectionLister) List(selector labels.Selector) (ret []*v1alpha1.Collection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Collection))
	})
	return ret, err
}

// Collections returns an object that can list and get Collections.
func (s *collectionLister) Collections(namespace string) CollectionNamespaceLister {
	return collectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CollectionNamespaceLister helps list and get Collections.
// All objects returned here must be treated as read-only.
type CollectionNamespaceLister interface {
	// List lists all Collections in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Collection, err error)
	// Get retrieves the Collection from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Collection, error)
	CollectionNamespaceListerExpansion
}

// collectionNamespaceLister implements the CollectionNamespaceLister
// interface.
type collectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Collections in the indexer for a given namespace.
func (s collectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Collection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Collection))
	})
	return ret, err
}

// Get retrieves the Collection from the indexer for a given namespace and name.
func (s collectionNamespaceLister) Get(name string) (*v1alpha1.Collection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("collection"), name)
	}
	return obj.(*v1alpha1.Collection), nil
}
